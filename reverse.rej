--- Block.java	
+++ Block.java	
@@ -39,6 +39,9 @@ public class Block extends Rectangle {
             case "EMPTY":
                 imageIcon = new ImageIcon(getClass().getResource("empty.png"));
                 break;
+            case "BRICK":
+                imageIcon = new ImageIcon(getClass().getResource("brick.png"));
+                break;
             case "NONE":
                 imageIcon = new ImageIcon(getClass().getResource("EXCLAM.png"));
                 break;
--- Board.java	
+++ Board.java	
@@ -26,6 +26,9 @@ public class Board extends JPanel {
     private ImageIcon backgroundIcon = new ImageIcon(getClass().getResource("background.jpg"));
     private Image background = backgroundIcon.getImage();
 
+    public GUIPanel guiPanel;
+    public int highestBlock = MAX_Y - 1;
+    public int lowestBrickY = MAX_Y - 1;
     int originalMoveUpTimer = 400;
     public int comboTimer = 0;
     public int DEFAULT_COMBO_TIMER = 200;
@@ -33,12 +36,14 @@ public class Board extends JPanel {
     public boolean canMoveUp = true;
     public int moveUpInterval = 0;
     public int moveUpOffSet = 0;
-
     public int comboStreak = 0;
 
     private EnemyAI AIHandler;
+    private Board thisBoard;
 
-    public Board(boolean AI) {
+    public Board(boolean AI, GUIPanel GUI) {
+        guiPanel = GUI;
+        thisBoard = this;
         System.out.println(MAPY_SIZE);
         System.out.println(MAX_Y);
         System.out.println(levelArray[0].length);
@@ -67,19 +72,7 @@ public class Board extends JPanel {
         }
     }
 
-    public boolean canFall() {
-        for (int x = 0; x < MAX_X; x++) {
-            for (int y = 0; y < MAX_Y; y++) {
-                if (levelArray[x][y].falling == true) {
-                    return false;
-                }
-                if (levelArray[x][y].needsRemoval) {
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
+
 
     public void setArray(int x, int y, Block a) {
         levelArray[x][y] = a;
@@ -110,6 +103,19 @@ public class Board extends JPanel {
             adjacencyCheck(x, MAX_Y - 2);
         }
     }
+
+    public void generateBricks(int comboSize)
+    {
+        for(int y = 1; highestBlock - y > 0 && y <= comboSize; y++)
+        {
+            for(int x = 0; x < MAX_X; x++)
+            {
+                levelArray[x][highestBlock - y] = new Block("BRICK");
+            }
+        }
+        lowestBrickY = highestBlock - 1;
+        
+    }
     
     
     public boolean adjacencyCheck(int x, int y) {
@@ -188,14 +194,20 @@ public class Board extends JPanel {
         }
         return deleteOrigin;
     }
-
+    
     public void moveUp()
     {
+        boolean existsBricks = false;
         for (int x = 0; x < MAX_X; x++) {
             for (int y = 1; y < MAX_Y; y++) {
                 levelArray[x][y - 1] = levelArray[x][y];
+                if(levelArray[x][y - 1].color == "BRICK")
+                    existsBricks = true;
+                
             }
         }
+        if(existsBricks == true)
+            lowestBrickY--;
         levelCursor.moveUp();
     }
     private void removeBlock() {
@@ -206,13 +218,15 @@ public class Board extends JPanel {
             public void run() {
                 for (int x = 0; x < levelArray.length; x++) {
                     for (int y = 0; y < levelArray[0].length; y++) {
-                        if (levelArray[x][y].needsRemoval && levelArray[x][y].delayTime <= 0) {
+                        if (levelArray[x][y].needsRemoval && levelArray[x][y].delayTime <= 0)
+                        {
                             Block temp = levelArray[x][y] ;
                             levelArray[x][y] = new Block("EMPTY");
                             temp = null;
-                        } else if (levelArray[x][y].needsRemoval) {
+                        }
+                        else if (levelArray[x][y].needsRemoval)
+                        {
                             levelArray[x][y].delayTime--;
-                            
                         }
                     }
                 }
@@ -240,12 +254,14 @@ public class Board extends JPanel {
     
     public void shiftDown() {
         boolean moveUp = true;
+        boolean bricksMovedDown = false;
         for (int x = MAX_X - 1; x >= 0; x--) {
-            if(!"EMPTY".equals(levelArray[x][MAX_Y-1].color))
+            if(!"EMPTY".equals(levelArray[x][MAX_Y-1].color) && !"BRICK".equals(levelArray[x][MAX_Y-1].color))
                 adjacencyCheck(x,MAX_Y-1);
             for (int y = MAX_Y - 2; y >= 0; y--) {
                 //If the current block is not EMPTY and the block below it IS EMPTY
-                if (!"EMPTY".equals(levelArray[x][y].color) && "EMPTY".equals(levelArray[x][y + 1].color)) {
+                if (!"EMPTY".equals(levelArray[x][y].color) && !"BRICK".equals(levelArray[x][y].color)
+                        && "EMPTY".equals(levelArray[x][y + 1].color)) {
                     levelArray[x][y].falling = true;
                     Block temp = levelArray[x][y + 1];
                     levelArray[x][y + 1] = levelArray[x][y];
@@ -254,7 +270,8 @@ public class Board extends JPanel {
                     //moveUpTimer = originalMoveUpTimer;
                 }
                 //Else if the current block is not EMPTY and the block below it is not EMPTY and the block is falling
-                else if (!"EMPTY".equals(levelArray[x][y+1].color) &&!"EMPTY".equals(levelArray[x][y].color) && levelArray[x][y].falling) {
+                else if (!"EMPTY".equals(levelArray[x][y+1].color) &&!"EMPTY".equals(levelArray[x][y].color)
+                        && levelArray[x][y].falling) {
                     levelArray[x][y].falling = false;
                     if(adjacencyCheck(x, y) == true)
                     {
@@ -266,8 +283,21 @@ public class Board extends JPanel {
                         
                     }
                 }
+                else if("BRICK".equals(levelArray[x][y].color) &&
+                        //(lowestBrickY - lowestBrickY) != 1)
+                        (highestBlock - lowestBrickY)> 1)
+                {
+                    System.out.println("fucker");
+                    Block temp = levelArray[x][y + 1];
+                    levelArray[x][y + 1] = levelArray[x][y];
+                    levelArray[x][y] = temp;
+                    bricksMovedDown = true;
+                }
+                System.out.println(lowestBrickY + " " + highestBlock);
             }
         }
+        if(bricksMovedDown == true)
+            lowestBrickY ++;
         canMoveUp = moveUp;
     }
     
@@ -281,7 +311,7 @@ public class Board extends JPanel {
             levelArray[x1][y] = levelArray[x2][y];
             levelArray[x2][y] = temp;
             //these if statements fix the error when you move a same colored block
-            // to 2 same colored block, and it would trigger 3 in a row, but the 
+            // to 2 same colored block, and it would trigger 3 in a row, but the
             // moved block should fall instead because you moved it to a column that
             // was empty.
             if(y + 1 < MAX_Y && levelArray[x1][y + 1].color != "EMPTY")
@@ -319,35 +349,46 @@ public class Board extends JPanel {
     public class DecreaseTimeThread implements Runnable
     {
         
-            @Override
-            public void run() {
-                try{
-                    if(canMoveUp && moveUpTimer > 0)
-                    {
-                        if(moveUpTimer % moveUpInterval == 0)
-                            moveUpOffSet += 1;
-                        moveUpTimer -= 1;
-                    }
-                    else if (canMoveUp && moveUpTimer <= 0)
-                    {
-                        moveUpOffSet = 0;
-                        moveUpTimer = originalMoveUpTimer;
-                        moveUp();
-                        generateRow();
-                    }
-                    if(comboTimer > 0)
-                        comboTimer --;
-                    else
-                        comboStreak = 0;
-                   //System.out.println(comboStreak);
+        @Override
+        public void run() {
+            try{
+                if(canMoveUp && moveUpTimer > 0)
+                {
+                    if(moveUpTimer % moveUpInterval == 0)
+                        moveUpOffSet += 1;
+                    moveUpTimer -= 1;
                 }
-                catch (Throwable e)
+                else if (canMoveUp && moveUpTimer <= 0)
                 {
-                    System.out.println("DecreaseTimeThread:" + e);
+                    moveUpOffSet = 0;
+                    moveUpTimer = originalMoveUpTimer;
+                    moveUp();
+                    generateRow();
                 }
-            repaint();
+                if(comboTimer > 0)
+                    comboTimer --;
+                else
+                {
+                    if(comboStreak > 0)
+                    {
+                        //lowestBrickY = highestBlock - 1;
+                        addBricks();
+                    }
+                    comboStreak = 0;
+                }
+                //System.out.println(comboStreak);
             }
-            
+            catch (Throwable e)
+            {
+                System.out.println("DecreaseTimeThread:" + e);
+            }
+            repaint();
+        }
+        
+    }
+    private void addBricks()
+    {
+        guiPanel.addBricks(this, comboStreak);
     }
     //
     public void decreaseTime() {
@@ -372,6 +413,7 @@ public class Board extends JPanel {
         }
         
         //Draws the blocks
+        highestBlock = MAX_Y - 1;
         for (int x = 0; x < levelArray.length; x++) {
             for (int y = 0; y < levelArray[0].length; y++) {
                 if (levelArray[x][y] instanceof Block) {
@@ -379,6 +421,9 @@ public class Board extends JPanel {
                     g.drawImage(levelArray[x][y].getImage(), BLOCK_SIZE * x, BLOCK_SIZE * y - moveUpOffSet, BLOCK_SIZE, BLOCK_SIZE, this);
                     //g.drawImage(levelArray[x][y].getImage(), BLOCK_SIZE * x, BLOCK_SIZE * y, this);
                 }
+                if((levelArray[x][y].color != "EMPTY" && levelArray[x][y].color != "BRICK")
+                        && y< highestBlock)
+                    highestBlock = y;
                 
             }
         }
--- EnemyAI.java	
+++ EnemyAI.java	
@@ -293,7 +293,7 @@ public class EnemyAI
                         bestMatch.setSize(matches.size());
                         //bestMatch.addAll(0, matches);
                         Collections.copy(bestMatch, matches);
-                        System.out.println("BestMatch: " + bestMatch.size());//bestMatch.size());
+                        //System.out.println("BestMatch: " + bestMatch.size());//bestMatch.size());
                         matches.clear();
                         matches.add(array.get(i));
                         numMatches = 0;
--- GUIPanel.java	
+++ GUIPanel.java	
@@ -16,8 +16,6 @@ import java.util.concurrent.TimeUnit;
 import javax.swing.ImageIcon;
 import javax.swing.JFrame;
 import javax.swing.JLabel;
-import javax.swing.JPanel;
-//REVERSION
 
 class GUIPanel extends Applet implements ActionListener{
     //public static final int WIDTH = 1000, HEIGHT = 825;
@@ -53,10 +51,13 @@ class GUIPanel extends Applet implements ActionListener{
              //System.out.println(game.getContentPane().getWidth());
                 HEIGHT = game.getContentPane().getHeight();
                 WIDTH = game.getContentPane().getWidth();
+                /*
                if(WIDTH < previousW)
                   WIDTH += (previousW - WIDTH);
                else if (WIDTH > previousW)
                   WIDTH -= (WIDTH - previousW);
+                */
+                WIDTH = previousW;
 
                if(HEIGHT < previousH)
                    WIDTH -= (previousH - HEIGHT);
@@ -65,12 +66,15 @@ class GUIPanel extends Applet implements ActionListener{
                 //WIDTH =  (int)(HEIGHT*RATIO);
                
                 BANNER_WIDTH = WIDTH/6;
-                b1.setBounds(0,0,(WIDTH/2)-(BANNER_WIDTH/2),HEIGHT);
-                b2.setBounds(b1.WIDTH + BANNER_WIDTH,0,(WIDTH/2)-(BANNER_WIDTH/2),HEIGHT);
+                if(b1 != null)
+                    b1.setBounds(0,0,(WIDTH/2)-(BANNER_WIDTH/2),HEIGHT);
+                if(b2 != null)
+                    b2.setBounds(b1.WIDTH + BANNER_WIDTH,0,(WIDTH/2)-(BANNER_WIDTH/2),HEIGHT);
                 Board.resizeBoard();
                
-               previousH = HEIGHT;
-               previousW = WIDTH;
+               //game.setSize(WIDTH, HEIGHT);
+               //previousH = HEIGHT;
+               //previousW = WIDTH;
              
             }
 
@@ -102,10 +106,10 @@ class GUIPanel extends Applet implements ActionListener{
     public void startGame1(){
         gameState = 1;
         game.remove(menu);
-        b1 = new Board(false);
+        b1 = new Board(false, this);
         //b1.decreaseTime();
         b1.setBounds(0,0,b1.WIDTH,b1.HEIGHT);
-        b2 = new Board(true);
+        b2 = new Board(true, this);
         //b2.decreaseTime();
         b2.setBounds(b2.WIDTH + BANNER_WIDTH,0,b2.WIDTH,b2.HEIGHT);
         banner = new JLabel();
@@ -124,10 +128,10 @@ class GUIPanel extends Applet implements ActionListener{
     public void startGame2(){
         gameState = 2;
         game.remove(menu);
-        b1 = new Board(false);
+        b1 = new Board(false, this);
         //b1.decreaseTime();
         b1.setBounds(0,0,b1.WIDTH,b1.HEIGHT);
-        b2 = new Board(false);
+        b2 = new Board(false, this);
         //b2.decreaseTime();
         b2.setBounds(b2.WIDTH + BANNER_WIDTH,0,b2.WIDTH,b2.HEIGHT);
         banner = new JLabel();
@@ -152,10 +156,12 @@ class GUIPanel extends Applet implements ActionListener{
             public void run() {
                 ComboStreakDisplay.setText(String.valueOf(b1.comboStreak));
                 //System.out.println("fucskfjasd;lfkjas;d");
+                /*
                 if(game.getContentPane().getWidth() > b1.WIDTH + BANNER_WIDTH + b2.WIDTH)
-                   game.setSize(WIDTH, HEIGHT);
+                   game.setSize(b1.WIDTH + BANNER_WIDTH + b2.WIDTH, HEIGHT);
                else if(game.getContentPane().getWidth() < b1.WIDTH + BANNER_WIDTH + b2.WIDTH)
-                   game.setSize(WIDTH, HEIGHT);
+                   game.setSize(b1.WIDTH + BANNER_WIDTH + b2.WIDTH, HEIGHT);
+                */
                 repaint();
             }
         }, 0, 100, TimeUnit.MILLISECONDS);
@@ -271,4 +277,39 @@ class GUIPanel extends Applet implements ActionListener{
             
         }
     }
+     // This function is called within the board class, and it will pass a
+     // reference to itself. Always put blocks on opposite board
+     public void addBricks(Board whichBoard, int comboSize)
+     {
+         //System.out.println("yo");
+         //b1 is left board
+        if(whichBoard == b1)
+        {
+            b2.generateBricks(comboSize);    
+            /*
+            for(int y = 1; b2.highestBlock - y > 0 && y <= comboSize; y++)
+            {
+            for(int x = 0; x < Board.MAX_X; x++)
+            {
+            b2.levelArray[x][b2.highestBlock - y] = new Block("BRICK");
+            }
+            }
+            b2.lowestBrickY = b2.highestBlock - 1;
+            //System.out.println(b2.lowestBrickY + " " + b2.highestBlock);
+            */
+        }
+        else if(whichBoard == b2)
+        {
+            for(int y = 1; b1.highestBlock - y > 0 && y <= comboSize; y++)
+            {
+                for(int x = 0; x < Board.MAX_X; x++)
+                {
+                    b1.levelArray[x][b1.highestBlock - y] = new Block("BRICK");
+                }
+            }
+            b1.lowestBrickY = b1.highestBlock - 1;
+            //System.out.println(b2.lowestBrickY + " " + b2.highestBlock);
+        }
+        
+     }
 }
